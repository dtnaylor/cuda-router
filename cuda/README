router.cu is where the bulk of our "router" is implemented. You can invoke it
in either CPU-only sequential mode or GPU/CPU mode:

	router					// GPU/CPU mode
	router -sequential		// CPU-only mode

Other options can be specified at the command line; to see a full list, run:

	router -help


To test with a stream of packets from click, launch the router first, as shown
above, and then launch click:

	cd ../click/userlevel
	./click ../conf/cuda_simple.click


The actual packet processing code is stored in separate .cu files (e.g.,
firewall.cu or lpm_trie.cu). This processing code consists of four functions:

	process_packets		This is a GPU kernel to perform packet processing
						(like LPM lookup or firewall rule matching). It will
						be called by router.cu every time there is a batch
						of packets to be processed.

	setup				This function is called only a single time before the
						execution of the process_packets kernel. Any setup
						code needed by the kernel function goes here (e.g., 
						copying forwarding tables or firewall rule sets to
						the GPU).

	process_packets_sequential	This is a CPU-only sequential version of the
						packet processing algorithm, used for comparing
						performance. It is executed whenever there is a new
						batch of packets to process and the router is running
						in CPU-only mode.

	setup_sequential	This function is called only a single time before the
						execution of the process_packets_sequential function.


To control which set of processing functions are used (e.g., the firewall
functions or the LPM functions), change the #define in router.h:

	#define FIREWALL	// uses the firewall functions in firewall.cu
	#define LPM_TRIE	// uses the lpm functions in lpm_trie.cu
